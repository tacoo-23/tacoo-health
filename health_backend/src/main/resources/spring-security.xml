<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <context:component-scan base-package="com.itcast"/>
    <!--    开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>

    <!--
    auto-config:自动配置,如果设置为true,表示自动应用一些默认配置:比如框架会提供一个默认的登录页面
    当拦截认证后没有对应权限便会跳到登录页面
    use-expressions:是否使用spring security提供的表达式来描述权限,access中的hasRole,hasAuthority等都是表达式

-->
<!--    配置哪些资源匿名可以访问(不登录也可以访问)
        http:用于定义相关权限控制,以下配置是指定访问哪些资源不需要进行权限控制
-->
<!--    <security:http security="none" pattern="/pages/*"/>-->
    <security:http security="none" pattern="/login.html"/>
    <security:http security="none" pattern="css/**"/>
    <security:http security="none" pattern="img/**"/>
    <security:http security="none" pattern="js/**"/>
    <security:http security="none" pattern="plugins/**"/>

    <security:http auto-config="true" use-expressions="true">

        <security:headers>
            <!--设置在页面可以通过iframe访问受保护的页面，默认为不允许访问-->
            <security:frame-options policy="SAMEORIGIN"/>
        </security:headers>


<!--        只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/**" access="isAuthenticated()"/>

<!--        如果我们要使用自己指定的页面作为登录页面,必须配置登陆表单,method要用post,否则无法接收到表单信息
            配置登录页面:
            login-page:指定登录页面,告诉框架哪个页面或路径是登录页面
            username-parameter:对应登录页面表单用户名框的name属性值username,
            password-parameter:对应密码框的name属性值password
            login-processing-url:对应表单登录提交的路径,所以登录操作是由spring-security框架来进行操作认证处理,
                                 不需要我们再写controller来处理登录操作
            default-target-url:认证成功后跳转的页面路径
            authentication-failure-url:认证失败,登录失败跳转的路径

-->
        <security:form-login login-page="/login.html" username-parameter="username"
                                password-parameter="password"
                                login-processing-url="/login.do"
                                default-target-url="/pages/main.html"
                                authentication-failure-url="/login.html"/>
<!--
        配置我们指定的登录页面需要关闭csrf,
        csrf:对应CsrfFilter过滤器
        disable:是否启用CsrfFilter过滤器,如果使用自定义登录页面需要关闭此项,true是关闭,默认false开启的
        因为框架会认为我们自己配置的登录页面不安全
        在使用框架提供的登录页面时,在跳转到登录页面之前,csrf字符串就生成放进内存了,并隐藏在框架提供的登录页面里
        当点击登陆时,csrf字符串会被一并提交,经过CsrfFilter过滤器,过滤器会检查字符串,
        字符串匹配上就知道我们使用的是他们提供的登录页面,是安全的,如果匹配不上就会认为是恶意攻击,会被禁止操作
        所以需要关闭CsrfFilter过滤器
-->
        <security:csrf disabled="true"/>
<!--
        logout:退出登录
        logout-url:退出登陆操作对应的请求路径
        logout-success-url:退出登录后的跳转页面
        invalidate-session:销毁session
-->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html"
                         invalidate-session="true"/>

    </security:http>
<!--
    authentication-manage:认证管理器,用于处理认证操作
-->
    <security:authentication-manager>
<!--    authentication-provider:认证提供者,执行具体的认证逻辑
       当登陆操作被拦截到,就会调用认证管理器进行认证操作,会通过反射来调用id为userService的类里的方法,该类要求必须实现
       UserDetailsService接口
    -->
<!--        注解注入的对象,框架会根据类名首字母小写来给定id-->
        <security:authentication-provider user-service-ref="springSecurityUserService">
<!--     user-service:用于获取用户信息,提供给authentication-provider进行认证       -->

            <!--                配置一个具体的用户
                    {noop}:明文,告知框架对密码不要进行加密处理,否则框架会自动对密码进行加密处理.
                    authorities:表示该用户拥有的角色,进行授权,跟access匹配

            <security:user-service>
                <security:user name="admin" password="{noop}1234" authorities="ROLE_ADMAIN"/>
            </security:user-service>
            -->

<!--            指定对密码进行加密的对象-->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

<!--    配置密码加密对象,使用bcrypt进行加密,光配置不写,需要告诉框架使用它进行加密-->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


</beans>